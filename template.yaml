AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Integration API sample

  Send event to EventBridge bus with API call

Globals:
  Function:
    Timeout: 25
    MemorySize: 128

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: "Support for several environment in parallel: dev, test, acc, prod."

Resources:

  ConfigurationDetailsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: configuration-id
          AttributeType: S
      KeySchema: 
        - AttributeName: configuration-id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub 
      - "${ENV}-enterprise-service-bus"
      - ENV: !Ref Environment

  # LambdaRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: EventBridgeBusPutEvent
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action: 'events:PutEvents'
  #               Resource: !GetAtt EventBus.Arn
  #             - Effect: Allow
  #               Action:
  #                 - dynamodb:GetItem
  #               Resource:
  #                 - !GetAtt ConfigurationDetailsTable.Arn
  #             - Effect: Allow
  #               Action: 'logs:CreateLogGroup'
  #               Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
  #             - Effect: Allow
  #               Action:
  #                 - 'logs:CreateLogStream'
  #                 - 'logs:PutLogEvents'
  #               Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*'
  #                 - FunctionName: !Ref EventBridgeBusPutEventFunc


  EventBridgeBusPutEventApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: !Sub 
            - "${ENV}ApiPlan"
            - ENV: !Ref Environment

  EventBridgeBusPutEventFunc:
    Type: AWS::Serverless::Function
    Properties:
      #FunctionName: EventBridgeBusPutEventFunc
      #Role: !GetAtt LambdaRole.Arn
      CodeUri: lambdas/
      Handler: put_event.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Events:
        EventBridgeBusPutEventFuncAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EventBridgeBusPutEventApi
            Path: /
            Method: post
            Auth:
              ApiKeyRequired: true
      Environment:
        Variables:
          ENVIRONMENT: 
            Ref: Environment
          EVENTBRIDGE_BUS: !GetAtt EventBus.Arn
          CONFIGURATION_TABLE_NAME:
            !Select [1, !Split ['/', !GetAtt ConfigurationDetailsTable.Arn]]
      Policies:
        Statement:
          - Effect: Allow
            Action: 'events:PutEvents'
            Resource: !GetAtt EventBus.Arn
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource:
              - !GetAtt ConfigurationDetailsTable.Arn

  # LambdaRole1:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: TriggerFunctionOnEvent
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action: 'logs:CreateLogGroup'
  #               Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
  #             - Effect: Allow
  #               Action:
  #                 - 'logs:CreateLogStream'
  #                 - 'logs:PutLogEvents'
  #               Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*'
  #                 - FunctionName: !Ref TriggeredByEventFunc

  TriggeredByEventFunc:
    Type: AWS::Serverless::Function
    Properties:
      #FunctionName: TriggeredByEventFunc
      #Role: !GetAtt LambdaRole1.Arn
      CodeUri: lambdas/
      Handler: triggered_by_event.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:Put*
              - s3:List*
            Resource:
              - "arn:aws:s3:::qonqord-destination-bucket/*"
              - "arn:aws:s3:::qonqord-source-bucket/*"
              - "arn:aws:s3:::qonqord-destination-bucket"
              - "arn:aws:s3:::qonqord-source-bucket"


  EventRule0:
    Type: AWS::Events::Rule
    Properties:
      Description: process-application-A-events
      EventBusName: !Sub 
        - "${ENV}-enterprise-service-bus"
        - ENV: !Ref Environment
      EventPattern:
        source:
          - woodwing.image.processing
        detail-type:
          - channel-processing
      #Name: process-application-A-events
      State: ENABLED
      Targets:
        - Id: Id32f72173-7a5d-4dc6-8059-c5443a0c1365
          Arn: !GetAtt TriggeredByEventFunc.Arn


  PermissionForEvent0ToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TriggeredByEventFunc
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRule0.Arn

Outputs:
  EventBridgeBusPutEventApiDev:
    Description: "API Gateway endpoint URL for Dev stage for TemplateScannerWrapper function"
    Value: !Sub 
      - "https://${APIID}.execute-api.${AWS::Region}.amazonaws.com/Dev/"
      - APIID: !Ref EventBridgeBusPutEventApi

